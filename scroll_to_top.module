<?php

/**
 * Implementation of hook_init().
 */

function scroll_to_top_preprocess_page(&$variables)
{

    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $admin_theme = \Drupal::config('system.theme')->get('admin');
    $config = \Drupal::config('scroll_to_top.settings');

    if ($config->get('scroll_to_top_enable_admin_theme') == TRUE || ($config->get('scroll_to_top_enable_admin_theme') == FALSE && ($theme != $admin_theme))) {

        $variables['#attached']['library'] = 'scroll_to_top/scroll_to_top_style';

        //building the css style
        $position = "";
        // Button position
        if ($config->get('scroll_to_top_position') == 1) {
            $position = "#back-top { right:40px; }";
        }

        if ($config->get('scroll_to_top_position') == 3) {
            $position = "#back-top { left:50%;margin:0px;}";
        }

        // Display label
        if ($config->get('scroll_to_top_display_text') == FALSE) {
            $display = "span#link {display : none;}";
        } else {
            $display = "";
        }

        // background color on hover
        $bgcolor = "#back-top span#button { background-color: " . $config->get('scroll_to_top_bg_color_out', '#555555') . ";}";
        $bgcolor .= " #back-top span#button:hover {opacity:1;filter:alpha(opacity = 1);background-color: " . $config->get('scroll_to_top_bg_color_hover', '#777777') . ";}";
        $css = $position;
        $css .= $bgcolor;
        $css .= $display;

        if ($css != '') {
            $attachments['#attached']['html_head'][] = [
                [
                    '#tag' => 'style',
                    '#value' => '#backtotop {' . $css . '}' . $bgcolor,
                ],
                'css'
            ];
        }

        /*$variables['#attached']['js'][] = [
            'type' => 'setting',
            'data' => array(
                'label' => t($config->get('scroll_to_top_label'))
            )
        ];
        $variables['#attached']['css'][] = [
            'data' => $css ,
            'type' => 'inline'
        ];*/

    }
}

